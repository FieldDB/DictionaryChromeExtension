<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>Dictionary Lookup - Options</title>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <script type="text/javascript">
      //<![CDATA[
      // Helpers to store and access objects in local storage.
      Storage.prototype.setObject = function(key, value) {
        this.setItem(key, JSON.stringify(value));
      }
      Storage.prototype.getObject = function(key) {
        var value = this.getItem(key);
        if (value == null) {
          return null;
        } else {
          return JSON.parse(value);
        }
      }
      
      // Set the active option in the <select> named select_name to choice.
      function setSelection(select_name, choice) {
        var select = document.getElementById(select_name);
        for (var i in select.children) {
          var child = select.children[i];
          if (child.value == choice) {
            child.selected = 'true';
            break;
          }
        }
      }
      
      var SHOWN_DISCLAIMER = Boolean(localStorage.getObject('shownDisclamer3'));
      localStorage.setObject('shownDisclamer3', true);
      
      selects    = ['clickModifier', 'shortcutModifier', 'shortcutKey'];
      checkboxes = ['shortcutEnable', 'shortcutSelection', 'hideWithEscape',
                    'saveFrameSize'];
      textboxes  = ['frameWidth', 'frameHeight', 'queryFormWidth'];
      
      // Restores state from localStorage.
      function restoreOptions() {
        // Set defaults.
        setSelection('clickModifier', 'Ctrl');
        setSelection('shortcutModifier', 'Ctrl');
        setSelection('shortcutKey', 'Q');
        document.getElementById('shortcutEnable').checked = true;
        document.getElementById('shortcutSelection').checked = false;
        document.getElementById('frameWidth').value = 550;
        document.getElementById('frameHeight').value = 250;
        document.getElementById('queryFormWidth').value = 250;
        document.getElementById('hideWithEscape').checked = true;
        document.getElementById('saveFrameSize').checked = true;
      
        // Override defaults by saved settings.
        for (var i in selects) {
          var select = selects[i];
          var choice = localStorage.getObject(select);
          if (choice != null) setSelection(select, choice);
        }
      
        for (var i in checkboxes) {
          var checkbox = checkboxes[i];
          var checked = localStorage.getObject(checkbox);
          if (checked != null) document.getElementById(checkbox).checked = checked;
        }
      
        for (var i in textboxes) {
          var textbox = textboxes[i];
          var val = localStorage.getObject(textbox);
          if (val != null) document.getElementById(textbox).value = Math.round(val);
        }
        
        updateShortcutFields();
      }
      
      // Saves state to localStorage.
      function saveOptions() {
        for (var i in selects) {
          var select = selects[i];
          localStorage.setObject(select, document.getElementById(select).value);
        }
      
        for (var i in checkboxes) {
          var checkbox = checkboxes[i];
          localStorage.setObject(checkbox, document.getElementById(checkbox).checked);
        }
      
        for (var i in textboxes) {
          var textbox = textboxes[i];
          var value = parseInt(document.getElementById(textbox).value);
          if (value) localStorage.setObject(textbox, value);
        }
        
        // Fade in status message.
        var status = document.getElementById('saveStatusMessage');
        status.style.opacity = 1;
        setTimeout(function() {
          status.style.opacity = 0;
        }, 1500);
      }
      
      function updateShortcutFields() {
        checked = document.getElementById('shortcutEnable').checked;
        document.getElementById('shortcutModifier').disabled = !checked;
        document.getElementById('shortcutKey').disabled = !checked;
        document.getElementById('shortcutSelection').disabled = !checked;
      }
      
      function showDisclaimer() {
        setTimeout(function() {
          if (SHOWN_DISCLAIMER) return;
          
          grayOut(true);
          
          var disclaimer = document.createElement('div');
          disclaimer.id = 'disclaimer';
          document.body.appendChild(disclaimer);
          disclaimer.style.zIndex = 2;
          disclaimer.style.background = 'white';
          disclaimer.style.position = 'fixed';
          disclaimer.style.left = (window.innerWidth - 700) / 2 + 'px';
          disclaimer.style.width = '700px';
          disclaimer.style.padding = '15px';
          disclaimer.style.borderRadius = '15px';
          setTimeout(function() {
            disclaimer.style.opacity = 1;
            disclaimer.style.top = (window.innerHeight - disclaimer.offsetHeight) / 2 + 'px';
          }, 100);
          
          var title = document.createElement('h2');
          disclaimer.appendChild(title);
          title.innerText = 'Disclaimer';
          title.style.textAlign = 'center';
          
          var text = document.createElement('p');
          disclaimer.appendChild(text);
          text.innerHTML = '<p>Greetings,</p><p>Thank you for using the Dictionary Lookup extension.</p><p>Until recently, this extension was known as "Google Dictionary Lookup" and used as its data source the Google Dictionary. Unfortunately, due to Google\'s contracts with their data providers, they are not legally allowed to expose the Dictionary API to third parties, and as such, I was forced to switch providers.</p><p>This extension\'s goal has always been to provide fast lookup and the cleanest possible interface, but I was unable to find any other free online dictionary that satisfied these constraints and allows third party access, and as such, had to fall back to the public domain Webster 1913 dictionary. Sadly, this means that the quality and amount of info provided by this dictionary has suffered.</p><p>Fear not, however, as I have created a separate branch of this extension, <a href="https://chrome.google.com/extensions/detail/pebegifiepdlicjchldkdlmbohhhpcfi">Inline Search & Lookup</a>, to provide support for any and all online dictionaries at the choice of the user.</p><p>If you have used this extension only for translation, you should consider switching to <a href="https://chrome.google.com/extensions/detail/jlhlebbhengjlhmcjebbkambaekglhkf">Bubble Translate</a>.</p><p>Regards,<br />Max</p>';
          
          var button = document.createElement('input');
          button.type = 'button';
          disclaimer.appendChild(button);
          button.value = 'Close';
          button.disabled = true;
          button.style.display = 'block';
          button.style.margin = 'auto';
          button.style.padding = '0.25em';
          button.addEventListener('click', function() {
            grayOut(false);
            disclaimer.style.opacity = 0;
            setTimeout(function() {
              disclaimer.style.display = 'none';
            }, 400);
          });
          
          setTimeout(function() {
            button.disabled = false;
          }, 3000);
        }, 300);
      }
      
      // Background graying function, based on: 
      // http://www.hunlock.com/blogs/Snippets:_Howto_Grey-Out_The_Screen
      function grayOut(vis) {
        // Pass true to gray out screen, false to ungray.
        var dark_id = 'shader';
        var dark = document.getElementById(dark_id);
        var first_time = (dark == null);
        
        if (first_time) {
          // First time - create shading layer.
          var tnode = document.createElement('div');
          tnode.id = dark_id;
          
          tnode.style.position = 'absolute';
          tnode.style.top = '0px';
          tnode.style.left = '0px';
          tnode.style.overflow = 'hidden';
          
          document.body.appendChild(tnode);
          dark = document.getElementById(dark_id);
        }
        
        if (vis) {
          // Set the shader to cover the entire page and make it visible.
          dark.style.zIndex = 1;
          dark.style.backgroundColor = '#000000';
          dark.style.width = document.body.scrollWidth + 'px';
          dark.style.height = document.body.scrollHeight + 'px';
          dark.style.display = 'block';
          
          setTimeout(function() {dark.style.opacity = 0.7;}, 100);
        } else if (dark.style.opacity != 0) {
          setTimeout(function() {dark.style.opacity = 0;}, 100);
          setTimeout(function() {dark.style.display = 'none';}, 400);
        }
      }
      //]]>
    </script>
    <style type="text/css">
      body {
        font-family: Arial, Tahoma, sans-serif;
        margin-top: 0px;
        padding-top: 0px;
      }
      h1 {
        margin-top: 0px;
        color: #F8F8FF;
        background-image: -webkit-gradient(linear, left top, left bottom, from(#BBBBBB), to(gray));
        border-radius: 0px 0px 10px 10px;
        padding: 5px 10px;
        text-shadow: rgba(0, 0, 0, 0.3) 0px -1px 1px;
        font-size: 150%;
        text-align: center;
        -webkit-box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 5px;
      }
      label {
        float: left;
        width: 20em;
        padding-right: 20px;
        text-align: right;
      }
      div.field {
        padding-top: 5px;
      }
      #container {
        margin: auto;
        width: 600px;
        margin-top: 0px;
        padding-top: 0px;
      }
      #saveStatusMessage {
        display: block;
        position: fixed;
        top: 45%;
        left: 0px;
        text-align: center;
        color: white;
        font-weight: bold;
        text-shadow: rgba(0, 0, 0, 0.2) 0px -1px 1px;
        background-image: -webkit-gradient(linear, left top, left bottom, from(#BBBBBB), to(gray));
        border-radius: 0px 15px 15px 0px;
        padding: 10px 20px;
        opacity: 0;
        -webkit-transition: opacity 1.5s ease;
      }
      fieldset {
        background: #F8F8FF;
        border: 1px #CCC solid;
        border-radius: 0px;
        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;
        margin-top: 20px;
        margin-bottom: 20px;
        -webkit-box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 5px;
      }
      legend {
        background: #F8F8FF;
        border: 1px #CCC solid;
        padding: 5px 10px;
        text-shadow: rgba(0, 0, 0, 0.2) 0px -1px 1px;
        color: #777;
        font-size: 110%;
      }
      #container input, #container select {
        margin-left: 0px;
      }
      #container input[type=text] {
        width: 2.25em;
      }
      #container input[type=button] {
        margin: auto;
        margin-bottom: 10px;
        margin-top: -10px;
        background-image: -webkit-gradient(linear, left top, left bottom, from(#BBBBBB), to(gray));
        color: white;
        border: none;
        border-radius: 15px;
        text-shadow: rgba(0, 0, 0, 0.4) 0px -1px 1px;
        font-weight: bold;
        padding: 2px 13px 3px 12px;
        display: block;
        cursor: pointer;
        font-size: 120%;
      }

      #container input[type=button]:hover {
        background-image: -webkit-gradient(linear, left top, left bottom, from(gray), to(#BBBBBB));
        padding: 3px 12px 2px 13px;
      }

      #shader, #disclaimer {
        opacity: 0;
        -webkit-transition: opacity 0.35s linear;
      }
    </style>
  </head>
  <body onload="restoreOptions(); showDisclaimer();">
    <div id="container">
      <h1>Dictionary Lookup Options</h1>
      <fieldset>
        <legend>General</legend>
        <div class="field">
          <label for="clickModifier">Mouse lookup modifier:</label>
          <select id="clickModifier">
            <option value="None">None</option>
            <option value="Ctrl">Ctrl</option>
            <option value="Alt">Alt</option>
            <option value="Meta">Command (Mac)</option>
            <option value="Ctrl+Alt">Ctrl+Alt</option>
          </select>
        </div>
        <div class="field">
          <label for="hideWithEscape">Hide popup with Esc:</label>
          <input type="checkbox" id="hideWithEscape" />
        </div>
      </fieldset>
      <fieldset>
        <legend>Keyboard Shortcut</legend>
        <div class="field">
          <label for="shortcutEnable">Enable shortcut:</label>
          <input type="checkbox" id="shortcutEnable" onclick="updateShortcutFields()" />
        </div>
        <div class="field">
          <label for="shortcutModifier">Shortcut modifier:</label>
          <select id="shortcutModifier">
            <option value="Ctrl">Ctrl</option>
            <option value="Alt">Alt</option>
            <option value="Meta">Command (Mac)</option>
            <option value="Ctrl+Alt">Ctrl+Alt</option>
            <option value="Ctrl+Shift">Ctrl+Shift</option>
            <option value="Alt+Shift">Alt+Shift</option>
          </select>
        </div>
        <div class="field">
          <label for="shortcutKey">Shortcut key:</label>
          <select id="shortcutKey">
            <option value="A">A</option>
            <option value="B">B</option>
            <option value="C">C</option>
            <option value="D">D</option>
            <option value="E">E</option>
            <option value="F">F</option>
            <option value="G">G</option>
            <option value="H">H</option>
            <option value="I">I</option>
            <option value="J">J</option>
            <option value="K">K</option>
            <option value="L">L</option>
            <option value="M">M</option>
            <option value="N">N</option>
            <option value="O">O</option>
            <option value="P">P</option>
            <option value="Q">Q</option>
            <option value="R">R</option>
            <option value="S">S</option>
            <option value="T">T</option>
            <option value="U">U</option>
            <option value="V">V</option>
            <option value="W">W</option>
            <option value="X">X</option>
            <option value="Y">Y</option>
            <option value="Z">Z</option>
            <option value="`">`</option>
          </select>
        </div>
        <div class="field">
          <label for="shortcutSelection">Shortcut looks up selection:</label>
          <input type="checkbox" id="shortcutSelection" />
        </div>
      </fieldset>
      <fieldset>
        <legend>Sizing</legend>
        <div class="field">
          <label for="frameWidth">Popup width:</label>
          <input type="text" id="frameWidth" />
        </div>
        <div class="field">
          <label for="frameHeight">Popup height:</label>
          <input type="text" id="frameHeight" />
        </div>
        <div class="field">
          <label for="queryFormWidth">Manual query form width:</label>
          <input type="text" id="queryFormWidth" />
        </div>
        <div class="field">
          <label for="saveFrameSize">Remember size:</label>
          <input type="checkbox" id="saveFrameSize" />
        </div>
      </fieldset>
      <input type="button" onclick="saveOptions()" value="Save" />
      <div id="saveStatusMessage">Options saved.</div>
    </div>
  </body>
</html>
    